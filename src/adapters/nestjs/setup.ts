import { LoggingInterceptor } from './logging.interceptor';
import { LoggerConfig } from '../../types';

/**
 * Configura o logging para aplica√ß√µes NestJS
 * @param app - Inst√¢ncia da aplica√ß√£o NestJS
 * @param config - Configura√ß√£o do logger
 */
export function setupLogging(app: any, config: LoggerConfig): void {
  try {
    console.log('üîç setupLogging: Iniciando configura√ß√£o do logging');
    
    // Valida√ß√£o b√°sica do app
    if (!app || typeof app.useGlobalInterceptors !== 'function') {
      console.log('‚ùå setupLogging: App inv√°lido ou sem useGlobalInterceptors');
      return;
    }

    // Valida√ß√£o b√°sica da config
    if (!config || typeof config !== 'object') {
      console.log('‚ùå setupLogging: Config inv√°lida');
      return;
    }

    // Valida√ß√£o dos campos obrigat√≥rios
    if (!config.serviceName || typeof config.serviceName !== 'string') {
      console.log('‚ùå setupLogging: serviceName inv√°lido');
      return;
    }

    // Valida√ß√£o espec√≠fica para collector
    if (!config.collectorEndpoint) {
      console.log('‚ùå setupLogging: collectorEndpoint inv√°lido');
      return;
    }

    console.log('‚úÖ setupLogging: Configura√ß√£o v√°lida, registrando interceptor');
    
    // Registrar interceptor globalmente
    const interceptor = new LoggingInterceptor(config);
    app.useGlobalInterceptors(interceptor);
    
    console.log('‚úÖ setupLogging: Interceptor registrado com sucesso');
  } catch (error) {
    console.log('‚ùå setupLogging: Erro ao configurar logging:', error);
    // N√£o quebra a aplica√ß√£o, apenas ignora o logging
  }
}