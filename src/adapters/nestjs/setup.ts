import { LoggingInterceptor } from './logging.interceptor';
import { SigNozConfig } from '../../types';

/**
 * Configura o logging para aplica√ß√µes NestJS
 * @param app - Inst√¢ncia da aplica√ß√£o NestJS
 * @param config - Configura√ß√£o do SigNoz
 */
export function setupLogging(app: any, config: SigNozConfig): void {
  console.log('üîß setupLogging chamado...');
  console.log('üìã Config recebida:', config);
  
  try {
    // Valida√ß√£o b√°sica do app
    if (!app || typeof app.useGlobalInterceptors !== 'function') {
      console.warn('setupLogging: app inv√°lido ou sem m√©todo useGlobalInterceptors, ignorando logging');
      return;
    }

    // Valida√ß√£o b√°sica da config
    if (!config || typeof config !== 'object') {
      console.warn('setupLogging: config inv√°lido, ignorando logging');
      return;
    }

    // Valida√ß√£o dos campos obrigat√≥rios
    if (!config.serviceName || typeof config.serviceName !== 'string') {
      console.warn('setupLogging: serviceName inv√°lido, ignorando logging');
      return;
    }

    if (!config.endpoint || typeof config.endpoint !== 'string') {
      console.warn('setupLogging: endpoint inv√°lido, ignorando logging');
      return;
    }

    // Registrar interceptor globalmente
    console.log('üî® Criando LoggingInterceptor...');
    const interceptor = new LoggingInterceptor(config);
    console.log('üìù LoggingInterceptor criado com sucesso');
    
    console.log('üîó Registrando interceptor globalmente...');
    app.useGlobalInterceptors(interceptor);
    console.log('‚úÖ LoggingInterceptor registrado globalmente');
  } catch (error) {
    console.warn('setupLogging: Erro ao configurar logging (ignorando):', error instanceof Error ? error.message : String(error));
    // N√£o quebra a aplica√ß√£o, apenas ignora o logging
  }
}